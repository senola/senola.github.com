<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: border | 潭风]]></title>
  <link href="http://senola.uni.me/blog/categories/border/atom.xml" rel="self"/>
  <link href="http://senola.uni.me/"/>
  <updated>2014-12-22T23:03:01+08:00</updated>
  <id>http://senola.uni.me/</id>
  <author>
    <name><![CDATA[senola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[css之border的拓展]]></title>
    <link href="http://senola.uni.me/blog/2014/12/23/css-border/"/>
    <updated>2014-12-23T06:16:06+08:00</updated>
    <id>http://senola.uni.me/blog/2014/12/23/css-border</id>
    <content type="html"><![CDATA[<p>关于css的border属性相信大家已经熟悉的不能再熟悉了。那么是不是这就意味border没有什么可以探究了呢？ <span style="font-style:italic;font-weight:bold;color:green;">now,let learn something that we never konew about!</span></p>

<p>我们知道CSS3可以很简单地创建圆角，而CSS2要实现圆角效果就复杂多了。在这些新技术未出现之前，我们可以通过使用绝对定位背景图片来显示圆或箭头，这就意味着需要另外的图片处理工具（如photoshop）配合使用。其实，如今显示圆或者圆角已不再需要其他背景图片了。<!--more--></p>

<h4><span style="font-style:italic;">1.The Basic</span></h4>

<p>可以经常看到border的一下用法：</p>

<p><code>
   border: 1px solid black;
</code></p>

<p>上面代码的意思为给元素加上一个1px的边框。这是border属性的简写方式，普通而又简单，我们也可以拆分如下：</p>

<p><code>
   border-width: thick;   
   border-style: solid;
   border-color: black;
</code></p>

<p>border-width属性有了三个特殊值可供选择，分别是：thin，medium和thick。效果如下：</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/border-width.jpg" alt="border-image" /></p>

<p>看起来似乎将border属性分开来写不仅多余而且麻烦，但在某些特定的场合下还是很有用的，比如hover下改变边框的颜色，如果用简写的话还需要重复编写：</p>

<p>```
   .box {</p>

<pre><code>  border: 1px solid red;
</code></pre>

<p>   }
   .box:hover {</p>

<pre><code>  border: 1px solid green;
</code></pre>

<p>   }
```</p>

<p>接用border-color属性的话依旧能达到同样的效果，而且这也是最合理的写法：</p>

<p>```
   .box {</p>

<pre><code>  border: 1px solid red;
</code></pre>

<p>   }
   .box:hover {</p>

<pre><code>  border-color: green;
</code></pre>

<p>   }
```</p>

<h4><span style="font-style:italic;">2.border-radius</span></h4>

<p>border-radius 是CSS3提供的，并且是第一个被社区广泛使用的属性。IE8以上，所有现在浏览器都支持显示圆角。因为有了它，妈妈怎么也不担心我不会photoshop了~</p>

<p>显然，为了在各个浏览器中达到同样的效果，border-radius需要加上特定的前缀:</p>

<p>```
   -webkit-border-radius: 10px;</p>

<pre><code>  -moz-border-radius: 10px;
       border-radius: 10px;
</code></pre>

<p>```</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/border-radius.jpg" alt="border-radius.jpg" /></p>

<p>当然，我们也可以将它拆分成多个属性，自由的控制每一个角的显示：</p>

<p><code>
   border-top-left-radius: 20px;
   border-top-right-radius: 0;
   border-bottom-right-radius: 30px;
   border-bottom-left-radius: 0;
</code>
<img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/each-side.jpg" alt="each-side.jpg" /></p>

<p>事实上，上面代码设置<code>border-top-right-radius: 0</code>和<code>border-bottom-left-radius: 0;</code>属性是多余的，除非该属性会被继承时才需要重设。很显然border-radius不需要。</p>

<p>使用border-radius可以很简单的画一个柠檬：</p>

<p>```
   .lemon {</p>

<pre><code>   width: 200px; height: 200px; 
   background: #F5F240;
   border: 1px solid #F0D900;      
   border-radius: 10px 150px 30px 150px;
</code></pre>

<p>   }
```
<img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/lemon.jpg" alt="lemon.jpg" /></p>

<p>额，是不是上面内容过于简单常见呢？我觉得也是，早就会了嘛。。接下来我们玩点新鲜的~</p>

<h4><span style="font-style:italic;">3. Multiple Borders</span></h4>

<p>当我们想把多重边框应用到一个元素上的时，有很多技术我们可以参考：</p>

<h5><span style="font-style:italic;color:red;">(1). border-style </span></h5>

<p>我们知道<code>solid</code>,<code>dashed</code>和<code>dotted</code>是<code>border-style</code>最常用的属性值。除了这些，我们还可以使用不常见的<code>groove</code>和<code>ridge</code>.</p>

<p><code>
   border: 20px groove #e3e3e3;
</code></p>

<p>也可以拆分成如下代码：</p>

<p><code>
   border-color: #e3e3e3;
   border-width: 20px;
   border-style: groove;
</code></p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/groove-ridge.jpg" alt="groove-ridge.jpg" /></p>

<p>虽然这相当的有用，但是<code>ridge</code>或<code>groove</code>事实上都不是真正的多边框。</p>

<h5><span style="font-style:italic;color:red;">(2). outline </span></h5>

<p>目前，创建两个边框最流行的技术是使用<code>outline</code>属性。</p>

<p>```
   .box {</p>

<pre><code>  border: 5px solid #292929;
  outline: 5px solid #e3e3e3;
</code></pre>

<p>   }
```
<img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/outline.jpg" alt="outline.jpg" /></p>

<p>这种方法运行效果棒，但是有一个限制就是只能创建两个边框。如果你需要创建一个有分层、带渐变效果时，得使用另外的方法。</p>

<h5><span style="font-style:italic;color:red;">(3). pseudo element (伪元素) </span></h5>

<p>当<code>outline</code>技术无法满足需要的时候，一种替代的方法是利用<code>:before</code>和<code>:after</code>伪元素，并且使用任何必要的额外边界生成的内容。</p>

<p>```
   .box {</p>

<pre><code>  position: relative;
  width: 400px; 
  height: 400px;
  background: #e3e3e3;
  border: 10px solid green;  
}

/* Create two boxes with the same width of the container */
.box:after, .box:before {
  content: '';
  position: absolute;
  top: 0; left: 0; bottom: 0; right: 0;
}

.box:after {
  border: 5px solid red;
  outline: 5px solid yellow;
}

.box:before {
  border: 10px solid blue;
}
</code></pre>

<p>```</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/pseudo-borders.jpg" alt="pseudo-borders.jpg" /></p>

<p>虽然这种方法不是最优雅的，但却也能达到预期效果。但也一点不理想就是颜色的顺序和边界颜色容易混淆。</p>

<h5><span style="font-style:italic;color:red;">(4). box-shadow </span></h5>

<p>最酷的且能创建无数边框的方法是利用<code>box-shadow</code>的<code>spread</code>参数。</p>

<p>```
   .box {</p>

<pre><code>  border: 5px solid red;
  box-shadow: 0 0 0 5px green,
              0 0 0 10px yellow,
              0 0 0 15px orange;
</code></pre>

<p>   }
```</p>

<div style="width: 400px; height: 400px;margin: 0 auto;margin-top: 25px;margin-bottom: 25px;background: #e3e3e3;border: 5px solid red;box-shadow: 0 0 0 5px green,0 0 0 10px yellow,0 0 0 15px orange;"></div>


<p>通过设置<code>box-shadow</code>的<code>x</code>,<code>y</code>,<code>blur</code>为0，我们可以使用<code>spread</code>值来创建边框，由于<code>box-shadow</code>可以对方，通过使用“，”就可以无限创建边框，是不是很有意思呢&hellip;(注意，老的浏览器并不识别该属性，不过作为现代人，就应该使用现代浏览器！！！)</p>

<h4><span style="font-style:italic;">4. modifying angles</span></h4>

<p>另外，我们可用使用“/”给<code>border-radius</code>赋值，定义唯一的水平和垂直半径：</p>

<p><code>
   border-radius: 50px / 100px; /* horizontal radius, vertical radius */
</code></p>

<p>等价于：</p>

<p><code>
   border-top-left-radius: 50px 100px;
   border-top-right-radius: 50px 100px;
   border-bottom-right-radius: 50px 100px;
   border-bottom-left-radius: 50px 100px;
</code></p>

<p>这种技术是特别有用，当你需要模拟一个微妙的，冗长的曲线，而不是一个通用的圆角。例如,下面的代码允许我们稍微脱离一个正方形形状，就有卷纸一样的效果。</p>

<p>```
   .box {</p>

<pre><code>   width: 200px; 
   height: 200px;
   background: #666;
   border-top-left-radius: 15em 1em;
   border-bottom-right-radius: 15em 1em;
</code></pre>

<p>   }
```</p>

<div style="width: 200px; height: 200px; margin: 0 auto;background: #666; outline: lightgrey 1px solid;border-top-left-radius: 15em 1em;border-bottom-right-radius: 15em 1em;"></div>


<h4><span style="font-style:italic;">5. css shapes</span></h4>

<p>也许最赞的是将0宽度和0高度的边框运用于元素，很疑惑？哈&hellip;让我们看看示例：</p>

<p>下面几个例子都是用的同样的标记。</p>

<p><code>
   &lt;div class="box"&gt;&lt;/div&gt;
</code></p>

<p>增加样式如下：</p>

<p>```
   .box {</p>

<pre><code>    width: 200px;
    height: 200px;
    background: black;
</code></pre>

<p>   }
<code>``
最流行的演示例子是在项目中如何使用css创建箭头。理解它的核心思想，你会发现其实也就是那么回事。首先得为每一边设置背景颜色然后同时设置容器的</code>width<code>和</code>height`的值为0。</p>

<p>假设有一个<code>div</code>并且带有一个叫<code>arrow</code>的<code>class</code>:</p>

<p>```
   .arrow {</p>

<pre><code>  width: 0;
  height: 0;
  border-top: 100px solid red;
  border-right: 100px solid green;
  border-bottom: 100px solid blue;
  border-left: 100px solid yellow;
</code></pre>

<p>   }
```
同时你也可以这样简写：</p>

<p>```
   .arrow {</p>

<pre><code>  width: 0;
  height: 0;
  border: 100px solid;  
  border-top-color: red;
  border-right-color: green;
  border-bottom-color: blue;
  border-left-color: yellow;
</code></pre>

<p>   }
```
还一种更为炫酷的写法，相信你会喜欢：</p>

<p><code>
   width: 0; height: 0;
   border: 100px solid;
   border-color: red green blue yellow;
</code>
<img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/all-side-colors.jpg" alt="all-side-colors.jpg" /></p>

<p>是不是很有趣呢？赶紧试试吧！我们只需要设置容器的宽度和高度为0，在设置各个边的颜色，宽度就能达到效果。那么当我们把其中的三条边的颜色设置为透明又会是什么效果呢？</p>

<p>```
   .arrow {</p>

<pre><code>  width: 0; height: 0;
  border: 100px solid;
  border-bottom-color: blue;
</code></pre>

<p>   }
```
<img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/single-border.jpg" alt="single-border.jpg" /></p>

<p>哈&hellip;这是一个充满神奇的世界。不过，我们的探索可不是仅仅止步于此！如果用一个div来表示一个箭头，太语意话了。在实际运用中我们常常会使用伪元素创建类似气泡的样式。</p>

<h5><span style="font-style:italic;color:red;">(1). create a speech bubble</span></h5>

<p>我们可以用纯css创建一个类似气泡的对话。</p>

<p><code>
   &lt;div class="speech-bubble"&gt;Hello world&lt;/div&gt;
</code></p>

<p>增加css样式：</p>

<p>```
   .speech-bubble{</p>

<pre><code>  position: relative;
  width: 200px;
  height: 150px;
  line-height: 150px; /* 垂直居中 */
  color: white;
  text-align: center;
  background-color: #292929;
  margin: 0 auto;
  border-radius: 10px;
</code></pre>

<p>   }
   .speech-bubble:after { /<em>伪元素充当箭头</em>/</p>

<pre><code>  position: absolute;
  content: '';
  width: 0;
  height: 0;
  border: 10px solid;
  border-top-color: #292929;
  top: 100%;
  left: 45%;
</code></pre>

<p>   }
```
<img src="https://raw.githubusercontent.com/senola/pictures/master/css/border/final.jpg" alt="final.jpg" /></p>

<h5><span style="font-style:italic;color:red;">(2). 垂直居中</span></h5>

<p>如上，如果文字很多的话，设置line-height是效果不好的，可以将容器的display设置为table,在设置容器中的文字为vertical-align: middle</p>

<p>```
   <div class="speech-bubble speech-bubble-top"></p>

<pre><code>   &lt;p&gt;Text goes here.&lt;/p&gt;
</code></pre>

<p>   </div>
```</p>

<p>css为：<br/>
```
   .speech-bubble {</p>

<pre><code>/* other styles */
 display: table;
</code></pre>

<p>   }</p>

<p>   .speech-bubble p {</p>

<pre><code> display: table-cell;
 vertical-align: middle;
</code></pre>

<p>   }
```
css是一个很神奇的东西，只要我们换个角度去思考就会有不一样的效果。附上两个例子：</p>

<div class="border-trans clearfix">
    <div class="border-hex-row">
        <div class="border-hex"><div class="border-top"></div><div class="border-middle"></div><div class="border-bottom"></div></div>
        <div class="border-hex"><div class="border-top"></div><div class="border-middle"></div><div class="border-bottom"></div></div>
        <div class="border-hex"><div class="border-top"></div><div class="border-middle"></div><div class="border-bottom"></div></div>
    </div>
    <div class="border-hex-row border-even">
        <div class="border-hex"><div class="border-top"></div><div class="border-middle"></div><div class="border-bottom"></div></div>
        <div class="border-hex"><div class="border-top"></div><div class="border-middle"></div><div class="border-bottom"></div></div>
    </div>
    <div class="border-hex-row">
        <div class="border-hex"><div class="border-top"></div><div class="border-middle"></div><div class="border-bottom"></div></div>
        <div class="border-hex"><div class="border-top"></div><div class="border-middle"></div><div class="border-bottom"></div></div>
        <div class="border-hex"><div class="border-top"></div><div class="border-middle"></div><div class="border-bottom"></div></div>
    </div>
</div>


<div class="border-biohazard"></div>


<p></p>

<h4><span style="font-style:italic;clear:both;">总结</span></h4>

<p>Though it’s true that the simple border: 1px solid black syntax goes a long way, if we’re clever, we can create a variety of helpful effects, icons, and shapes. Who would have thought that borders could be so powerful? The key is to remember that the styling for common shapes or speech bubbles should only be created once, and then abstracted away to utility classes for future usage.</p>
]]></content>
  </entry>
  
</feed>
