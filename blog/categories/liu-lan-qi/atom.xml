<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 浏览器 | 潭风]]></title>
  <link href="http://senola.github.io/blog/categories/liu-lan-qi/atom.xml" rel="self"/>
  <link href="http://senola.github.io/"/>
  <updated>2015-11-07T15:06:04+08:00</updated>
  <id>http://senola.github.io/</id>
  <author>
    <name><![CDATA[senola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浏览器到底是咋工作的？]]></title>
    <link href="http://senola.github.io/blog/2014/10/27/how-browsers-work/"/>
    <updated>2014-10-27T23:17:27+08:00</updated>
    <id>http://senola.github.io/blog/2014/10/27/how-browsers-work</id>
    <content type="html"><![CDATA[<h3>一、前言</h3>

<p>最近工作找的很是捉急，各种碰壁<code>Zz~(～ o ～)~zZ</code>。哎，说到头还是自己知识储备少，不深入。去一家公司面试前端，被问得是哑口无言，“说说浏览器是怎么渲染的？”、“如果要你用原生JS去解析JSON你会怎么做？”、“有自己的JS库吗？”。。。我<code>TM</code>怎么知道浏览器是如何渲染的，TM这是多高端的东西。劳资也只是刚出道一年，也就会写写页面、改改样式。<code>TM</code>我怎么知道如何去写原生的<code>JSON</code>解析，<code>javascript</code>不是有封装好的<code>JSON</code>解析<code>API</code>,鬼才会去想怎么实现啊，就面试那几分钟你能给个方案？。<!--more--><code>TM</code>我就不信我不会这些会影响工作。。</p>

<p>很牢骚是吗？一点也不。程序猿不经常牢骚那该会多么无趣啊！不过呢牢骚完了咱还得回头整整不是。没办法，谁叫咱菜啥也不会呢，要我是大牛我一定给你整趴下（<code>TM</code>当场就拒绝我，不会委婉点啊！没品，迟早出门掉钱..）。不过话说回来，我也很想知道像我们这群码农必定整天都要打交道的浏览器到底是咋工作？有什么深奥的<code>Knowledge</code>？</p>

<h3>二、How browsers work</h3>

<p>外国人的东西当然他们更懂，特别欣赏他们那种<code>Open</code>、<code>Share</code>和<code>Free</code>的理念，不像国人XX@#@#@#$$。<a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" style="color:green;font-weight:bold;font-size:16px;font-style:italic;">How browsers work</a> &mdash;-这个文章介绍了浏览器从头到尾的工作机制，如：HTML的解析、DOM树的生成、CSS的渲染等。为了拓展一下视野，不再被人鄙视，GO！！！</p>

<h4>2.1 浏览器是做啥的？</h4>

<p>当今地球主流浏览器有五类：IE（Internet Explorer）、Firefox、Safari、Chrome和Opera.那么它们是用来做什么呢？还用讲，当然是用来上网的呗，谁的速度快我就用谁~</p>

<p>浏览器的主要功能是展示网页资源，即用户请求<code>url</code>后将结果显示在浏览器窗口。可以展示包括<code>Html</code>、<code>PDF</code>、<code>picture</code>和文字等。</p>

<h4>2.2 浏览器的上层结构</h4>

<p>浏览器的主要歹念如下：</p>

<ul>
<li>用户接口：包括地址栏、前进、后退、书签菜单等窗口上出了网页显示区域以外的部分。</li>
<li>浏览器引擎： 查询与操作渲染引擎的接口</li>
<li>渲染引擎： 负责显示请求的内容。比如请求到<code>HTML</code>，它会负责解析<code>HTML</code>与<code>CSS</code>并将结果显示到窗口中。</li>
<li>网络：用于网路请求。如<code>http</code>请求。</li>
<li><code>UI</code>后端： 回执基础元件。如组合框与窗口。</li>
<li><code>Javascript</code>解析器： 用于解析执行<code>Javascript</code>代码。</li>
<li>数据存储：这是一个持久层。浏览器需要把所有数据存到硬盘上。如：cookies.<code>HTML5</code>规定了一个完整的浏览器中的数据库：“web database”。</li>
</ul>


<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_layers.png" alt="layers" /><br/>
图1 浏览器的主要概念</p>

<p>note： 与其他浏览器不同，<code>chrome</code>使用多个渲染引擎实例，每个<code>TAB</code>都是一个独立的进程。</p>

<h4>2.3 渲染引擎</h4>

<p>关于渲染引擎，<code>FireFox</code>使用<code>Gecko</code>； <code>Mozilla</code>用自家的渲染引擎；<code>Safari</code>和<code>chrome</code>都使用<code>Webkit</code>.</p>

<p><code>Webkit</code>是一个开源的渲染引擎，它源自<code>Linux</code>平台，经过<code>Apple</code>公司的修改可以支持<code>Mac</code>与<code>Window</code>平台。<a href="http://webkit.org" target="_bliank"><a href="http://webkit.org">http://webkit.org</a></a></p>

<h4>2.4 The main flow</h4>

<p>渲染引擎开始于从网络层获取请求内容，一般是不超过8K的数据块。接下来就是渲染引擎的基本工作流程：</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_flow.png" alt="flow" /><br/>
图 2：渲染引擎的基本工作流程</p>

<p>基本工作流分别是：解析<code>Html</code>、构建<code>DOM</code>树、渲染树结构、渲染树布局、绘制渲染树。渲染引擎会解析<code>HTML</code>文档并把标签转换成内容树中的<code>DOM</code>节点。它会解析<code>style</code>元素和外部文件中的样式数据，样式数据和<code>Html</code>中的现实控制将共同用来创建另一棵树&mdash;渲染树。</p>

<p>渲染树包含带有颜色、尺寸等显示属性的矩形。这些矩形的顺序与显示顺序一致。渲染树构建完成后就是“布局”处理，也就是确定每个节点在屏幕上的确切显示位置。下一步骤是“绘制”&mdash;&mdash;遍历渲染树并用<code>UI</code>后端层将每一个节点绘制出来。为了更好的用户体验，渲染引擎会尝试尽快的把内容显示出来。它不会等到所有ＨＴＭＬ都被解析完才创建并布局渲染树。它会 在处理后续内容的同时把处理过的局部内容先展示出来。</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_geckoflow.jpg" alt="geckoflow" /><br/>
图3： Webkit主要流程</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_webkitflow.png" alt="webkitflow" /><br/>
图4： Mozilla的Gecko渲染引擎主要流程</p>

<p>从上图可以看出，尽管<code>Webkit</code>与<code>Gecko</code>使用略微不同的术语，这个过程还是基本相同的。<code>Gecko</code> 里把格式化好的可视元素称做“帧树”（Frame tree）。每个元素就是一个帧（frame）。 <code>Webkit</code> 则使用”渲染树”这个术语，渲染树由”渲染对象”组成。Webkit 里使用”layout”表示元素的布局，<code>Gecko</code>则称为”Reflow”。<code>Webkit</code>使用”Attachment”来连接DOM节点与可视化信息以构建渲染树。一个非语义上的小差别是<code>Gecko</code>在<code>Html</code>与<code>Dom</code>树之间有一个附加的层 ，称作”content sink”，是创建<code>Dom</code>对象的工厂。</p>

<h4>2.5 Parsing (解析)</h4>

<p>解析一个文档意味着把它翻译成有意义的结构以供代码使用。解析的结果通常是一个由文档组成的树，称之为解析树或者语法树。示例&mdash;&mdash;解析表达式“2 + 3 &ndash; 1” 可以返回下面树：</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_nodetree.png" alt="nodetree" /> <br/>
图5：表达式树节点</p>

<h4>2.6 Grammars（语法）</h4>

<p>解析是基于文档所遵循的语法规则&mdash;&mdash;书写所用的语言或格式来进行的。每一种可以解析的格式必须由确定的语法与词汇组成。这被称之为上下文无关语法。人类语言并非此种语言，所以不能用常规的解析技术来解析。</p>

<h4>2.7 Parser &ndash; Lexer combination （解析器&mdash;词法分析组合）</h4>

<p>解析器有两个处理过程:词法分析与句法分析。词法分析负责把输入切分成符号序列，符号是语言的词汇——由该语言所有合法的单词组成。句法分析是对该语言句法法则的应用。解析器通常把工作分给两个组件——分词程序负责把输入切分成合法符号序列，解析程序负责按照句法规则分析文档结构和构建句法树。词法分析器知道如何过滤像空格，换行之类的无关字符。</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_parsetree.png" alt="parsetree" /> <br/>
图6： 从源文档到解析树（文档、词法分析、语法分析、解析树）</p>

<p>解析过程是交互式的。解析器通常会从词法分析器获取新符号并尝试匹配句法规则。如果匹配成功，就在句法树上创建相应的节点，并继续从词法分析器获取下一个符号。如果没有匹配的规则，解析器会内部保存这个符号，并继续从词法分析器获取符号，直到内部保存的所有符号能够成功匹配一个规则。如果最终无法匹配，解析器会抛出异常。这意味着文档无效，含有句法错误。</p>

<h4>2.8 Translation（转换）</h4>

<p>多数情况下解析树并非最终结果。解析经常是为了从输入文档转换成另外一种格式。比如编译器要把源码编译成机器码，会首先解析成解析树，再把解析树转换成机器码。</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_compilationflow.png" alt="compilationflow" />  <br/>
图7：编译过程（源码、解析、解析树、转换、机器码）</p>

<h4>2.9 HTML DTD</h4>

<p><code>HTML</code>的定义使用<code>DTD</code>文件。这种格式用来定义<code>SGML(Standard Generalized Markup language)</code>标准通用标记语言族语言，它包含对所有允许的元素的定义，包括它们的属性和层级关系。如我们前面所说，<code>HTML DTD</code>构不成上下文无关语法。</p>

<p><code>DTD</code>有几种不同类型。严格模式完全尊守规范，但其它模式为了向前兼容可能包含对早期浏览器所用标签的支持。当前的严格模式<code>DTD</code>：<a href="http://www.w3.org/TR/html4/strict.dtd">http://www.w3.org/TR/html4/strict.dtd</a></p>

<h4>2.10 DOM</h4>

<p>解析器输出的树是由<code>DOM</code>元素和属性节点组成的。<code>DOM</code>的全称为：<code>Document Object Model</code>。它是<code>HTML</code>文档的对象化描述，也是<code>HTML</code>元素与外界（如<code>Javascript</code>）的接口。<code>DOM</code>与标签几乎有着一一对应的关系，如下面的标签</p>

<pre><code>&lt;html&gt;
    &lt;body&gt;
        &lt;p&gt;
            Hello World
        &lt;/p&gt;
        &lt;div&gt; &lt;img src="example.png"/&gt;&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>会被转换成如的<code>DOM</code>树：</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_domtree.png" alt="domtree" /> <br/>
图8： DOM tree of the example markup</p>

<p>与<code>HTML</code>一样，<code>DOM</code>规范也由<code>w3c</code>组织制订。参考：<a href="http://www.w3.org/DOM/DOMTR">http://www.w3.org/DOM/DOMTR</a>. 这是一个操作文档的通用规范。有一个专门的模块定义HTML特有元素: <a href="http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html">http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html</a>.</p>

<p>当我们说树中包含<code>DOM</code>节点时，意思就是这个树是由实现了<code>DOM</code>接口的元素组成。这些实现包含了其它一些浏览器内部所需的属性。</p>

<h4>2.11 The parsing algorithm(解析算法)</h4>

<p>如我们前面看到的，<code>HTML</code>无法使用自上而下或自下而上的解析器来解析。
原因如下：</p>

<ul>
<li>语言的宽容特点</li>
<li>浏览器需要对无效<code>HTML</code>提供容错的事实</li>
<li>解析过程的反复。通常解析过程中源码不会变化。但在<code>HTML</code>中，<code>script</code>标签包含<code>document.write</code>时可以添加内容，即解析过程实际上还会改变源码。</li>
</ul>


<p>浏览器创建了自己的解析器来解析HTML文档。<code>HTML5</code>规范里对解析算法有具体的说明，解析由两部分组成：分词与构建树。分词属于词法分析部分，它把输入解析成符号序列。在<code>HTML</code>中符号就是开始标签，结束标签，属性名称和属生值。分词器识别这些符号并将其送入树构建者，然后继续分析处理下一个符号，直到输入结束。</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/how_browsers_work/how_browsers_work_html_parsing_flow.png" alt="how_browsers_work_html_parsing_flow" />  <br/>
图9： HTML解析流程 (源自HTML5规范)</p>

<p>暂时只了解这么多了，有空再学习学习~ 这里还有两篇 <a href="http://coolshell.cn/articles/9666.html" style="color:green;font-weight:bold;font-style:italic;font-size:16px" target="_blank">&lt;&lt;浏览器的渲染原理简介&gt;&gt;</a>、<a href="http://www.nowamagic.net/academy/detail/48110160" style="color:green;font-weight:bold;font-style:italic;font-size:16px" target="_blank">&lt;&lt;浏览器加载和渲染HTML的顺序以及Gzip的问题&gt;&gt;</a> 文章，得抽空观摩观摩！！！</p>

<p><strong>参考资料</strong>：</p>

<ul>
<li><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm">http://taligarsiel.com/Projects/howbrowserswork1.htm</a></li>
<li><a href="http://ued.ctrip.com/blog/?p=3295">http://ued.ctrip.com/blog/?p=3295</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主流浏览器简介]]></title>
    <link href="http://senola.github.io/blog/2014/07/19/browser-info/"/>
    <updated>2014-07-19T13:45:23+08:00</updated>
    <id>http://senola.github.io/blog/2014/07/19/browser-info</id>
    <content type="html"><![CDATA[<p>对一个web开发者来说，浏览器信息和统计数据是非常重要的。熟知他们才能更好的运用他们。</p>

<p>浏览器是指可以显示网页服务器或者文件系统的<code>HTML</code>内容，并让用户与这些文件交互的一种人间。网页浏览器主要通过<code>HTTP</code>协议也网页服务器交互并湖区网页，这些网页由<code>URL</code>制定，文件格式通常为<code>HTML</code>，并由<code>MIME</code>在<code>HTTP</code>协议中指明。常见的网页浏览器有：微软的<code>Internet Explorer</code>、Mozilla的<code>FireFox</code>、<code>Apple</code>的<code>Safari</code>,<code>Opera</code>、<code>Google Chrome</code>等。</p>

<!--more-->


<h4>浏览器的发展</h4>

<p>蒂姆.伯纳斯-李（Tim Berners-Lee）是第一个使用超文本来分享资讯的人，他于1990年发明了收割网页浏览器&mdash;<code>WorldWideWeb</code>，话说这么年我出生了！没想到浏览器竟然跟俺一样大，吼吼，小小激动了下 (^o^)/~。在1991年3月，他把这发明介绍了给他在CERN工作的朋友，从那时起浏览器的发展就和网络的发展联系在了一起。</p>

<p>下面来了解一下各主流浏览器。</p>

<h4>Internet Explorer</h4>

<p>首先，<code>Internet Explorer</code>是目前使用最为广泛的网页浏览器，为什么呢？因为它是捆绑在window系统上的，有着得天独厚的优势。但随着时代的发展，<code>IE</code>浏览器严重落后于新技术以及不遵循<code>W3C</code>规范，其在浏览器是市场所占的份额逐渐下降。深得开发人员鄙视~</p>

<p>2009年3月19日，微软发布了<code>Windows Internet Explorer 8</code>简体中文正式版。从以后的<code>IE9</code>、<code>IE10</code>、<code>IE11</code>的用户数来看，<code>IE8</code>的使用群体稳居榜首。这或许当下<code>WindowXP</code>用户数居多的原因吧！有一点不能理解就是，<code>IE</code>各版本没有给更新的提示。访问网页速度慢，兼容性差是<code>IE</code>浏览器的硬伤，幸运的是，微软于2014年4月8日起彻底取消对WindowsXP的所有技术支持。这或许意味着<code>windowXP</code>用户数会有一定程度的降低，而用户选择<code>win7</code>或<code>win8</code>的话也就间接地抛弃了低版本<code>IE</code>浏览器。可是，不可否认这是一个漫长的过程。。。</p>

<h4>Firefox</h4>

<p>Mozilla Firefox是一个开源的浏览器,它体积小速度快，主要特性有:标签式浏览;屏蔽弹出式窗口;自定制工具栏;扩展管理;更好的搜索特性;便捷的侧栏.此版本做了很大的更新,代码更优秀,功能更强大,包括安装程序,界面和下载管理器都作了很大的改进.力求功能上的更大完美。</p>

<h4>Opera</h4>

<p>Opera 是作为挪威电信公司Telenor的一个研究项目于1994年启动的，并于1995 发展为一个独立的开发公司，Opera Software ASA。它一款极为出色的浏览器，具有速度快、节省系统资源、订制能力强、安全性高以及体积小等特点。多文件接口(MDI)、方便的缩放功能、整合搜索引擎、键盘截径与鼠标浏览功能、对HTML标准的支持、整合电子邮件与新闻群组以及让使用者自订接口按钮、skin、工具列等的排列方式，都是Opera多年来备受喜爱的特殊功能。Opera除了在Windows外，也支持Linux、Mac等操作系统，同时内建的Opera在Symbian操作系统的浏览器.成为功能强大的手机浏览器之一,也是最受欢迎的浏览器之一.</p>

<h4>Chrome</h4>

<p>Google Chrome是由Google开发的一款设计简单、高效的Web浏览工具。Google凭借自己在搜索引擎领越的独特优势打造而成，其特点是支持多标签浏览，在提高安全性的同时，一个标签页面的崩溃也不会导致其他标签页面被关闭。此外，Google Chrome基于更强大的JavaScript V8引擎，这是当前Web浏览器所翘首期盼的。Google官方声称将开放Chrome的全部源代码。这将是许多开源软件爱好者的福音。个人最喜欢的一款浏览器，高端大气有档次。</p>

<h4>Safari</h4>

<p>Safari浏览器基于苹果Mac OS X平台的，多标签的网络浏览器。苹果发布的Windows版本的Safari，它支持Windows XP和Windows Vista操作系统，目前Safari 3.1正式版已经发布。支持多国语言版，适应简体中文界面，能够浏览绝大部分中文网页。Safari的特性包括：SnapBack、内嵌搜索功能、书签重命名、简化的下载流程等，这款浏览器是苹果针对公司战略的一个调整，目的是推出自主核心的浏览器慢慢吸取属于微软的市场份额。</p>

<h4>浏览器双核及CPU双核</h4>

<p>浏览器的双核就好比走路时脚上穿一只鞋，肩膀上还背着一双。见到制定的路（网页）就自动换鞋。所谓的双核是一般网页用chrome内核打开，网银等制定的网页用IE内核打开。由于哪些网页必须用IE内核，哪些用chrome打开很难全部预判出来，所以经常发生不能正常显示网页的问题，而且由于要运行两个内核，导致内存及CPU占用率都翻了一番。</p>

<h4>基于引擎区分</h4>

<h6>1.基于Gecko排版引擎</h6>

<p>Mozilla Firefox 、HotBrowser等</p>

<h6>2.基于WebKit排版引擎</h6>

<p>Google Chrome、Safari、Opera</p>

<h6>3.基于Trident排版引擎</h6>

<p>Internet Explorer</p>
]]></content>
  </entry>
  
</feed>
