<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | 潭风]]></title>
  <link href="http://senola.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://senola.github.io/"/>
  <updated>2015-03-17T21:03:04+08:00</updated>
  <id>http://senola.github.io/</id>
  <author>
    <name><![CDATA[senola]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[浅谈javascript 中undefined、null 和 NaN，call()和apply()的区别]]></title>
    <link href="http://senola.github.io/blog/2014/09/13/javascript-study-140912/"/>
    <updated>2014-09-13T02:34:12+08:00</updated>
    <id>http://senola.github.io/blog/2014/09/13/javascript-study-140912</id>
    <content type="html"><![CDATA[<h3>一、undefined、null 和 NaN</h3>

<h4>1.类型区别</h4>

<p><code>javascript</code>中有5中简单的数据类型（也称为基本数据类型），分别是：<code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>和<code>String</code>。另外还有一种复杂数据类型&mdash;&ndash;<code>objecct</code>,<code>object</code>本质上是由一组无序的名值对组成。 <br/>
介于<code>javascript</code>是松散类型的，因此需要有一种手段来检测给定的数据类型&mdash;<code>typeof</code>。对于一个值使用<code>typeof</code>操作符后可能返回下列某个字符串：</p>

<ul>
<li>&ldquo;undefined&rdquo;: 值未定义</li>
<li>&ldquo;boolean&rdquo;: 值为布尔值</li>
<li>&ldquo;string&rdquo;: 值为字符串</li>
<li>&ldquo;number&rdquo;: 值为数值</li>
<li>&ldquo;object&rdquo;: 值为对象或者null</li>
<li>&ldquo;function&rdquo;: 值为函数
<!--more--></li>
</ul>


<p> 测试代码：</p>

<pre><code>   var s1;      
   var s2 = true;   
   var s3 = 1;  
   var s4 = "javascript";  
   var s5 = new Object();  
   var s6 = null;
   var s7 = NaN;  
   var s8 = undefined;  
   var s9 = function () {}; 

   alert(typeof s1); //显示"undefined"  
   alert(typeof s2); //显示"boolean"  
   alert(typeof s3); //显示"number"   
   alert(typeof s4); //显示"string"   
   alert(typeof s5); //显示"object"   
   alert(typeof s6); //显示"object"   
   alert(typeof s7); //显示"number"   
   alert(typeof s8); //显示"undefined"   
   alert(typeof s9);  //显示"function"     
</code></pre>

<p>从以上代码可以看出未定义的和定义未赋值的类型为<code>undefined</code>,<code>null</code>是一种特殊的<code>object</code>，<code>NaN</code>是代表非数字值得特殊值，说明某些算数运算（如求负数的平方根）的结果不是数字，如方法parseInt()和parseFloat()在不能解析制定的字符串时就返回这个值。</p>

<h4>2.比较</h4>

<pre><code>var s1; //s1 值为undefined
var s2 = null;
var s3 = NaN;

alert(s1 == s2); // 显示"true"
alert(s1 != s2); // 显示"false"

alert(s1 == s3); // 显示"false"
alert(s1 != s3); // 显示"true"

alert(s2 == s3); // 显示"false"
alert(s2 != s3); // 显示"true"

alert(s3 == s3); // 显示"false"
alert(s3 != s3); // 显示"true"  
</code></pre>

<p>根据以上代码可以得出：（1）<code>undefiend</code>与<code>null</code>是相等的；(2)<code>NaN</code>与任何值都不相等，与自己也不相等。</p>

<h4>3. isNaN()函数</h4>

<p><code>isNaN()</code>函数用于检查其参数是否是非数字值，通常用于检测<code>pareFloat()</code>和<code>parseInt()</code>的结果，以判断它们表示的是否和合法的数字，当然也可以用<code>isNaN()</code>函数来检测算数错误，比如用0做出书情况：</p>

<pre><code>var day = new Date();
alert(isNaN(3.1415926));        //false
alert(isNaN(day));            //false
alert(isNaN('BeginMan'));    //true
alert(isNaN("2005/12/12"));    //true
alert(isNaN(NaN));
</code></pre>

<h4>4. undefined 类型判断</h4>

<pre><code>var test;
if(test == undefined) {
    console.log("----------测试一------------");
}
//用typeof操作符返回的是字符串
if(typeof(test) == "undefined") {
   console.log("----------测试二------------")
} 
</code></pre>

<h3>二、 call()和apply()</h3>

<p>一直搞不明白这两个玩意儿的联系和区别，网上查了点资料，整理如下。</p>

<h4>1.联系</h4>

<p><code>apply()</code>和<code>call()</code>都能劫持另外一个对象的方法，集成另外一个对象的属性：</p>

<pre><code>function1.apply(obj,args)；
</code></pre>

<p><strong>obj</strong>:这个对象将代替<code>function1</code>类中的<code>this</code>对象，即<code>function1</code>函数里的<code>this</code>不再指向<code>function1</code>自身，而是指向<code>obj</code>对象。 <br/>
<strong>args</strong>:数组类型的参数，作为参数传给<code>function</code>。</p>

<p><code>call()</code>和<code>apply()</code>类似，只是参数类表不一样，如下：</p>

<pre><code>function2.call(obj,[param1[,param2[...[,paramN]]]]);
</code></pre>

<p><strong>obj</strong>:该对象将代替<code>function2</code>类中的<code>this</code>对象，与<code>apply()</code>类似。  <br/>
<strong>params</strong>:参数列表（用逗号二凯的0个或者多个参数），注意，这不是数组。</p>

<p><span style="color:red;font-weight: bold;">调用了这两个方法的结果</span>：依然执行了<code>function</code>函数的功能，只是该<code>function</code>以另一个目标对象和一个参数列表。</p>

<h4>2. 区别</h4>

<p>用法不相同，主要是参数不完全相同。</p>

<p>测试代码：</p>

<pre><code>    function Person(name,age) {    
        this.name=name;    
        this.age=age;    
        this.money = 500;  
    }   

    function myFun() {       
        alert(this.money);  
    }  

    var money = 100;  
    myFun(money);   
    //return 100;  
    //window.myFun(money); 
    //这个时候this指向的是window对象，其实myFun函数和定义的var money = 100;都作为window对象子对象（即全局对象）  

    myFun.apply(window,[]);  //save to window.myFun.apply(window,[]);    
    //return 100;  //同上  

    myFun.apply(new Person('zhangsan',23),[]);    
    //return 500, 空数组作为参数，仅符合语法要求  
    //这个时候myFun方法里面的this指向的是new Person('zhangsan',23)对象，二不是myFun类(函数)，故弹出500  

    myFun.call(new Person('zhangsan',23),money,300,'mycardId');    
    //return 500, 后面money,300和mycardId是参数列表作为参数，一一列出  
    //这个时候myFun方法里面的this指向的是new Person('zhangsan',23)对象，二不是myFun类(函数)，故弹出500  
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript获取随机数方法]]></title>
    <link href="http://senola.github.io/blog/2014/07/19/javascript-getrandnum/"/>
    <updated>2014-07-19T10:47:19+08:00</updated>
    <id>http://senola.github.io/blog/2014/07/19/javascript-getrandnum</id>
    <content type="html"><![CDATA[<p>研究了一下<code>javascript</code>关于随机数的生成，整理如下。</p>

<p>要输出随机数则须用到<code>javascript</code>的一个方法&mdash;<code>random()</code>，<code>random()</code>方法属于<code>Math</code>对象。在<code>javascript</code>中，<code>Math</code>对象用于执行数学任务，如：</p>

<p><code>
  var pi_value = Math.PI; //圆周率     
  var sqrt_value = Math.sqrt(5);// 返回5的平方根
</code></p>

<p>可以看出<code>Math</code>对象在数学计算上是不可缺少的工具。与<code>Date</code>，<code>String</code>不同，她不是对象的类，因此没有构造函数<code>Math()</code>。像<code>Math.sin()</code>这样的函数只是函数，并不是某个对象的方法。你不需要创建它，通过把<code>Math</code>作为对象使用即可以条用她的所有属性及方法。</p>

<!--more-->


<h4>Math 的属性</h4>

<p>```</p>

<pre><code>E:返回算术常量 e，即自然对数的底数（约等于2.718）
LN2:返回 2 的自然对数（约等于0.693）
LN10:返回 10 的自然对数（约等于2.302）
LOG2E:返回以 2 为底的 e 的对数（约等于 1.414）
LOG10E:返回以 10 为底的 e 的对数（约等于0.434）
PI:返回圆周率（约等于3.14159）
SQRT1_2:返回返回 2 的平方根的倒数（约等于 0.707）
SQRT2:返回 2 的平方根（约等于 1.414）
</code></pre>

<p>```</p>

<h4>Math 的方法</h4>

<p>```</p>

<pre><code>abs(x):返回数的绝对值
acos(x):返回数的反余弦值
asin(x):返回数的反正弦值
atan(x):以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值
atan2(y,x):返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）
ceil(x):对数进行上舍入
cos(x):返回数的余弦
exp(x):返回 e 的指数
floor(x):对数进行下舍入
log(x):返回数的自然对数（底为e）
max(x,y):返回 x 和 y 中的最高值
min(x,y):返回 x 和 y 中的最低值
pow(x,y):返回 x 的 y 次幂
random():返回 0 ~ 1 之间的随机数
round(x):把数四舍五入为最接近的整数
sin(x):返回数的正弦
sqrt(x):返回数的平方根
tan(x):返回角的正切
toSource():返回该对象的源代码
valueOf():返回 Math 对象的原始值
</code></pre>

<p>```</p>

<p>了解<code>Math</code>对象的相关属性及方法会有意想不到的好处。今天主要研究一下<code>random()</code>方法，在<code>chrome</code>控制台输入：</p>

<pre><code>Math.random(); //回车
---&gt; 0.7504939001519233
Math.random(); //回车
---&gt; 0.7824516440741718
typeof(Math.random()); //回车
---&gt; "number" 
</code></pre>

<p>可以看出<code>random()</code>方法返回的是0 ~ 1之间的伪随机数。注意，可能为0，但总是小于1即生成数的范围是[0,1)。利用<code>javascript</code>取整方法<code>parseInt（）</code>即可获取[0,1)之间的整数，如：</p>

<pre><code>parseInt(Math.random() * 10); // 回车
---&gt; 3
parseInt(Math.random() * 10); // 回车
---&gt; 4
parseInt(Math.random() * 10); // 回车
---&gt; 6
Math.floor(Math.random()*10 + 1); //获取[1,10] 之间的随机数
---&gt; 10
</code></pre>

<p>由此，并可以获得了[0,1)之间的随机整数值，那么如果想要获取多位随机数（如4444,321,4443）又该如何操作呢？这里可以先随机出n位数，在将这n位数用连接符<code>+</code>连接起来即可，如下：</p>

<pre><code>function RndNum(n) {
    var rnd = "";
    for(var i = 0; i &lt; n; i++) {
       rnd += Math.floor(Math.random() * 10);
    }
    return rnd;
}
console.log("四位随机数： " + RndNum(4));　　//输出4位数的随机数的随机整数
console.log("八位随机数： " + RndNum(8));　　//输出8位数的随机数的随机整数
</code></pre>

<p>根据以上信息，我们要指定某个范围（如（2,3）内）的随机数就可以利用公式：<code>(Math.random()*(n-m)+m)</code>既可以返回m-n之间的随机数了，通用代码如下：</p>

<pre><code>&lt;!-- 获取随机正整数，对应的复数只需要加"-"号即可。0, 1 暂未判断 --&gt;
function getRandomNum( down, up) {
   switch (arguments.length) { //传入的参数个数
      case 1: 
          return parseInt(Math.random() * down + 1); // 获取[0,down)间的随机数
      case 2:
          return parseInt(Math.random() * (up - down + 1) + down); //获取[down,up] 之间的随机数
      default: 
          return 0; 
   }
}
// 测试代码
console.log("[0,1]间的随机整数：" + getRandomNum(100));
console.log("[2,5]间的随机整数：" + getRandomNum(2,5));
console.log("[1,10]间的随机整数：" + getRandomNum(1,10));
</code></pre>

<p>以上便是使用<code>random()</code>方法创建正整数随机数的方法。当然我们还可以基于时间来创建， 如：</p>

<pre><code>var now_time = new Date();
var second_num = now_time.getSeconds(); //产生一个基于目前时间的0到59的整数
var timestamp_num = now_time.getTime(); //产生一个基于目前时间等我时间戳
console.log("秒随机数：" + num);
console.log("时间戳随机数：" + timestamp_num);
</code></pre>

<h4>总结</h4>

<p>随机数的使用场景随处可见，如可以利用她创建随机的文本、表单、标题广告、背景图片。背景音乐及背景颜色等等。。。掌握了原理，如何运用也就是一码事儿！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用javascript判断各浏览器类型及版本]]></title>
    <link href="http://senola.github.io/blog/2014/07/17/get-browser-type/"/>
    <updated>2014-07-17T12:40:16+08:00</updated>
    <id>http://senola.github.io/blog/2014/07/17/get-browser-type</id>
    <content type="html"><![CDATA[<p>今天要在<code>IE</code>下测试大文件上传插件，发现项目组"前辈"们写的判断<code>IE</code>浏览器的的代码不管用了。</p>

<pre><code>navigator.userAgent.toLowerCase().indexOf("msie") != -1；
</code></pre>

<p>调试代码才发现原来<code>IE11</code>下<code>userAgent</code>值的格式与<code>IE10</code>不一样。打印出ie9,ie10,ie11三个版本的浏览器userAgent值，如下所示：</p>

<pre><code>IE9：userAgent:Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)    
IE10:userAgent:Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E)  
IE11:userAgent:Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; rv:11.0) like Gecko;
</code></pre>

<!--more-->


<p>可以看出，前两者（IE9,IE10）都含有<code>MSIE</code>这样一个值而后面紧接着的是<code>IE</code>浏览器的版本号。而奇葩的<code>IE11</code>的<code>userAgent</code>又重新做了调整，不再用<code>MSIE</code>来标识浏览器版本号，而是用的 <code>rv</code>。神奇吧，让我们再一次向这个让无数码农挥洒汗水的浏览器致敬！！╮(╯▽╰)╭</p>

<p>所以单纯的判断浏览器类型是否是<code>IE</code>的话，就要多增加一个<code>IE11</code>的判断了。（<code>IE12</code>貌似出来了，没测试过。。）但是如果<code>IE13</code>问世了，那么这个<code>userAgent</code>的值是不是又会改变呢？到时候是不是又得回来多添加一行专门为<code>IE13</code>而处理的语句？？如果是单纯的判断是否是<code>IE</code>浏览器的话，可以考虑不用<code>userAgent</code>,我们知道只有<code>IE</code>浏览器支持创建<code>ActiveX</code>控件，因此她有一个其他浏览器没有的东西&mdash;ActiveXObject函数，所以只需要判断<code>window</code>对象中是否存在<code>ActiveObject</code>函数就可以很明确的判断出当前的浏览器是否是神器<code>IE</code>：</p>

<pre><code>function isIE () { //判断是否是IE（ie11下也适合）  
    if( window.ActiveXObject || "ActiveXObject" in window) {
        console.log("I am IE");
    } else {
        console.log("I not IE");
    }
}
</code></pre>

<p>看到上边代码就能发现为什么多了一个<code>"ActiveXObject" in window</code>判断？没错那个还是因为<code>IE11</code>。查了点资料貌似是因为<code>IE11</code>中<code>window.ActiveObject</code>属性在<code>DOM</code>中是隐藏的，也就是说你不能在<code>IE11</code>中用<code>window.ActiveObject</code>来判断。有兴趣可以去参考下 <a href="http://msdn.microsoft.com/en-us/library/ie/dn423948%28v=vs.85%29.aspx" target="_blank">Cross-browser plugin detection</a>,反正我没啥兴趣，吼吼~</p>

<p>地球是一个很神奇的世界，你知道这个世界上有多少种浏览器吗？除了我们熟知的IE, Firefox, Opera, Safari四大浏览器之外，世界上还有近百种浏览器~ 当然我们还是只关心这些主流的浏览器，其他的也没精力，没时间去折腾！</p>

<p>浏览器的世界太奇妙，我们不懂！</p>

<p>额，既然<code>IE</code>都说了，其他的也学习下吧~~IE就不提了。</p>

<h3>Firefox</h3>

<p><code>firefox</code>中的<code>DOM</code>元素都有一个<code>getBoxObjectFor</code>函数，用来获取该<code>DOM</code>元素的位置和大小（IE对应的是getBoundingClientRect）。这是<code>firefox</code>独有。<code>firefox</code>下的<code>userAgent</code>大致如下：</p>

<pre><code> Mozilla/5.0 (Windows; U; Windows NT 5.2) Gecko/2008070208 Firefox/3.0.1
 Mozilla/5.0 (Windows; U; Windows NT 5.1) Gecko/20070309 Firefox/2.0.0.3
 Mozilla/5.0 (Windows; U; Windows NT 5.1) Gecko/20070803 Firefox/1.5.0.12
</code></pre>

<p>可根据<code>Firefox</code>后面的数字来获取版本号。</p>

<h3>Opera</h3>

<p> <code>Opera</code>提供了专门的浏览器标志是<code>window.opera</code>属性。Opera浏览器的userAgent如下：</p>

<pre><code>Opera/9.27 (Windows NT 5.2; U; zh-cn)
Opera/8.0 (Macintosh; PPC Mac OS X; U; en)
Mozilla/5.0 (Macintosh; PPC Mac OS X; U; en) Opera 8.0 
</code></pre>

<p>获取靠近<code>Opera</code>的数字即为浏览器版本号。</p>

<h3>Safari</h3>

<p><code>Safari</code>浏览器中有一个其他浏览器没有的<code>openDatabase</code>函数，可做为判断Safari的标志。Safari典型的userAgent如下：</p>

<pre><code>Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/525.13 (KHTML, like Gecko) Version/3.1 Safari/525.13
Mozilla/5.0 (iPhone; U; CPU like Mac OS X) AppleWebKit/420.1 (KHTML, like Gecko) Version/3.0 Mobile/4A93 Safari/419.3 
</code></pre>

<p>获取<code>version</code>之后的数字，即是获取浏览器版本号。</p>

<h3>Chrome</h3>

<p>本人最热衷的浏览器！！ <code>Chrome</code>有一个<code>MessageEvent</code>函数，但Firefox也有。不过，好在<code>Chrome</code>并没有<code>Firefox</code>的<code>getBoxObjectFor</code>函数，根据这个条件还是可以准确判断出<code>Chrome</code>浏览器的。目前，<code>Chrome</code>的<code>userAgent</code>是：</p>

<pre><code>Mozilla/5.0 (Windows; U; Windows NT 5.2) AppleWebKit/525.13 (KHTML, like Gecko) Chrome/0.2.149.27 Safari/525.13
</code></pre>

<p>可以看到，<code>chrome</code>的<code>userAgent</code>中还包含了<code>safar</code>的特征，这或许就是为什么<code>Chrome</code>可以运行所有<code>Apple</code>浏览器应用的基础吧。</p>

<p>so,根据以上特性可以经浏览器的版本判断整合在一起，如下：</p>

<pre><code>&lt;script type="text/javascript"&gt;
    function  browserCheck () { // 各个浏览器判断
        var Sys = {};
        var ua = navigator.userAgent.toLowerCase(); //获取 userAgent 值
        var s;
        (s = ua.match(/rv:([\d.]+)\) like gecko/)) ? Sys.ie = s[1] : //IE 11
        (s = ua.match(/msie ([\d.]+)/)) ? Sys.ie = s[1] :
        (s = ua.match(/firefox\/([\d.]+)/)) ? Sys.firefox = s[1] :
        (s = ua.match(/chrome\/([\d.]+)/)) ? Sys.chrome = s[1] :
        (s = ua.match(/opera.([\d.]+)/)) ? Sys.opera = s[1] :
        (s = ua.match(/version\/([\d.]+).*safari/)) ? Sys.safari = s[1] : 0;

        if (Sys.ie) console.log('IE: ' + Sys.ie);
        if (Sys.firefox) console.log('Firefox: ' + Sys.firefox);
        if (Sys.chrome) console.log('Chrome: ' + Sys.chrome);
        if (Sys.opera) console.log('Opera: ' + Sys.opera);
        if (Sys.safari) console.log('Safari: ' + Sys.safari);
    };
&lt;/script&gt;
</code></pre>

<p>往这儿瞧瞧&mdash;>: <a href="http://senola.github.io/collections/javascript/getBrowserType/getBrowserType.html" target="_blank" style="color:green;font-weight:bold;">测试地址</a></p>

<h3>总结：</h3>

<pre><code>1. 浏览器种类繁多，各浏览器有很多不同之处，有必要熟悉。
2. IE浏览器使用人居多，有必要知晓其相关特别之处。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AngularJS 学习之旅（一）]]></title>
    <link href="http://senola.github.io/blog/2014/04/07/20140406/"/>
    <updated>2014-04-07T01:41:40+08:00</updated>
    <id>http://senola.github.io/blog/2014/04/07/20140406</id>
    <content type="html"><![CDATA[<p><strong>前言</strong>：出来工作也快一年了，给我的感觉是学到的新东西并不是很多。不过，最近由于云盘前端需要重新改版，部门请来了一位前端大牛压阵。所以有幸认识了<code>AngularJS</code>，跟着大牛的脚步走进<code>AngularJS</code>的世界痛并快乐着&hellip;.</p>

<h2>一、简介</h2>

<p><a href="http://angularjs.org" target="_blank">AngularJS</a>是谷歌是<code>Google</code>推出的开源JavaScript MV*（MVW、MVVM、MVC）结构性的动态WEB程序应用框架。它允许你使用HTML模板语言,允许您扩展HTML语法，清晰、简洁地表达您的应用程序的组件。<code>AngularJS</code>的数据绑定和依赖注入减少了大部分你当前不得不写的代码，而且这一切都运行在浏览器内,使它能成为与任何服务器技术的理想合作伙伴。</p>

<!--more-->


<p>并不是所有的WEB APP都适合使用<code>AngularJS</code>,<code>AngularJS</code>最适合<strong><code>CRUD</code></strong>（CREATE READ UPDATE DELETE）类型的WEB APP。像<strong>Games</strong>、<strong>GUI</strong> <strong>editors</strong>这一不同于CRUD类型的app，它们更适合使用一些抽象层级较低的库，如<code>JQuery</code>。<span style="color:green"><strong>好吧，关于AngularJS的历史我觉得只要记住三点就行：谷歌的、开源的、适合CRUD类型的APP。</strong></span></p>

<h2>二、AngularJS 一些概念</h2>

<p>下面列举一些AngularJS的概念</p>

<p><code>
Template:使用了额外标记的HTML  
Directives：使用自定义属性和元素扩展的HTML   
Model:展示给用户和与用户进行交互的数据  
Scope：model存数的上下文，以便controllers, directives and expressions能够访问       
Expressions：能从Scope里访问的变量和函数    
Compiler：解析模板和实例化指令和表达式  
Filter：格式化表达式
View:用户能看到的的数据（the DOM）
Data Binding:model和view之间动态的数据
Controller:展示视图（view）之前的业务逻辑处理   
Dependency Injection：创建和连接对象或函数  
Injector：依赖注入的容器  
Module： 注入器的配置  
Service:可重用业务逻辑独立的观点    
</code></p>

<h2>三、核心内容（core concepts）</h2>

<h3>1 Templates</h3>

<p>在<code>AngularJS</code>的应用程序中,您将用数据填充页面模板的工作从服务器到客户机。结果是一个系统更好的结构化动态页面更新。下面是您将使用的核心特性。</p>

<h4>1.1 Data binding</h4>

<p>在<code>AngularJS</code>中，<code>Data-binding</code>是指在model和view组件间动态同步的数据。这意味着在应用程序里使用<code>AngularJS</code>的<code>Data-binding</code>可以让你像single-source-of-truth一样操作model。当model内容改变时，view也跟着变化，反之亦然。</p>

<p>Data Binding in Angular Templates</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/angularjs/One_Way_Data_Binding.png" alt="One_Way_Data_Binding" /></p>

<p>大部分的templating系统仅仅是单向绑定数据，它们把template和model组件合并到一起，并在一个view里边展示。在合并发生之后，model或者关联view代码的改变不会自动的反映在view上。更糟糕的是任何用户在view组件上的改变都不会在model组件上反映。这就意味着开发者不得不编写代码来不断同步model及view的数据。</p>

<p>Data Binding in Angular Templates</p>

<p><img src="https://raw.githubusercontent.com/senola/pictures/master/angularjs/Two_Way_Data_Binding.png" alt="Two_Way_Data_Binding" /></p>

<p><code>AngularJs</code>的template工作模式不一样，首先template(未解析的、添加了标记（markup）和指令(directives)的HTML文件)在浏览器中解析的，解析的结果产生了视图(view),view中的任何改变都会立刻反射到model上，而model的任何改变也会立刻呈现在view上。这大大简化开发人员的编程model.由于view仅仅是model的数据渲染，所以控制器（controoler）完全从view中分离。所以，这就是的测试Controller变的很简单，因为不需要关联view。</p>

<h4>1.2 Angular 表达式（Expressions）</h4>

<p><code>Angular expressions</code> 是类似Javascript的代码段通常用于绑定，如：。例如：下面是有效的<code>Angular expressions</code></p>

<pre><code> 1+2  
 a+b   
 user.name   
 items.[index]  
</code></pre>

<p>与<code>Javascript expressions</code>相比，<code>Angular expressions</code>有以下不同点：</p>

<pre><code>1. Conext(上下文)：在JavaScript expressions的值相对于全局的window(窗口)，而在Angular中，expression得值相对了一个scope(作用域)对象。   
2. forgiving（宽恕）:在JavaScript中求表达式值时若未定义的属性会发生“ReferenceError”或“TypeError”。而在Angular 中，express是被宽容的设置为“undefined”和“null”。
3. 没有控制流语句：在AngularJS中你不需要使用这些表达式：conditionals,loops或者exceptions。
4. Filters:你可以在展示expressions之前使用“filters”来格式化数据。
</code></pre>

<p>如果你想运行更复杂的JavaScript代码，你应该把它作为一个Controller方法在view中调用。如果你自己想eval()一个<code>Angular expression</code>，那么就使用 $eval()方法。</p>

<p>不像Javascript,默认定义的是全局的window属性，Angular expressions必须使用$window明确的指出为全局window对象。例如：假如你想在一个expression中调alert()函数，你必须用$window.alert()。这个限制是有意的,因为它能阻止意外的访问全局状态。</p>

<h4>1.3 Directives（指令）</h4>

<h5>1.3.1 what are Directives</h5>

<p>处于更高水准的，<code>Directives</code>是指那些在DOM元素（例如一个属性，元素名称，css class）上的标记，用来告诉<code>AngularJS</code> 的<strong>HTML compiler</strong>($compile解析器)给DOM元素附加一个特殊的行为或改变DOM元素及子元素。Angular 内置了一系列的<code>diresctives</code>,如：</p>

<p><code>ngBind</code>,<code>ngModel</code>,和<code>ngView</code></p>

<pre><code>What does it mean to "compile" an HTML template? For AngularJS, "compilation" 
means attaching event listeners to the HTML to make it interactive. The reason we   
use the term "compile" is that the recursive process of attaching directives      
mirrors the process of compiling source code in compiled programming languages.         
</code></pre>

<h5>1.3.2 Matching Directives(匹配指令)</h5>

<p>在我们编写一个<code>directive</code>之前，我们需要了解<code>Angular</code>的<code>HTML</code>解析器处理执行指令的过程。在一下的列子中，我们称<code>&lt;input&gt;</code>元素匹配<code>ngModel</code>指令:</p>

<p><code>
&lt;input ng-model="foo"&gt;
</code></p>

<p>下面也一样能匹配<code>ngModel</code>:</p>

<p><code>
&lt;input data-ng:model="foo"&gt;
</code></p>

<p><code>Angular</code>规范的命名了每一个元素的的标签和属性从而使得元素能和<code>directives</code>想匹配。通常要求指令是一些区分大小写、规范化的名字（如：ngModel）。然而,由于HTML是不区分大小写的,我们将指令在DOM中定为小写形式，通常使用<code>dash-delimited</code>的属性写在DOM元素(如ng-model)。标准化的处理如下：</p>

<p><code>
Strip x- and data- from the front of the element/attributes.    
Convert the :, -, or _-delimited name to camelCase.    
</code></p>

<p>以下绑定效果是一样的（<a href="http://plnkr.co/edit/XWmTVHDmp6U57Nke9fmn?p=preview" target="_blank">Demo演示</a>）：</p>

<pre><code>&lt;div ng-controller="Controller"&gt;
  Hello &lt;input ng-model='name'&gt; &lt;hr/&gt;
  &lt;span ng-bind="name"&gt;&lt;/span&gt; &lt;br/&gt;
  &lt;span ng:bind="name"&gt;&lt;/span&gt; &lt;br/&gt;
  &lt;span ng_bind="name"&gt;&lt;/span&gt; &lt;br/&gt;
  &lt;span data-ng-bind="name"&gt;&lt;/span&gt; &lt;br/&gt;
  &lt;span x-ng-bind="name"&gt;&lt;/span&gt; &lt;br/&gt;
&lt;/div&gt;    
</code></pre>

<p>小贴士：</p>

<pre><code>Best Practice: Prefer using the dash-delimited format (e.g. ng-bind for ngBind).   
If you want to use an HTML validating tool, you can instead use the data-prefixed    
version (e.g. data-ng-bind for ngBind). The other forms shown above are accepted     
for legacy reasons but we advise you to avoid them.
</code></pre>

<p>基于元素的名称、属性名、类名<code>$compile</code>可以匹配directives.所有Angular提供的directives都能匹配属性名、标签名、comments或class名。</p>

<h5>Text and attribute binding(文本及属性绑定)</h5>

<p>编译器在编译过程中匹配文本和属性并使用<code>$interpolate</code>判断是否包含嵌入式表达式。如：</p>

<p><code>
&lt;a ng-href="img/.jpg"&gt;Hello !&lt;/a&gt;
</code></p>

<h5>1.2.4 ngAttr 属性绑定</h5>

<p>Web浏览器对它们认为是正确的属性值有时候是很挑剔的。如：</p>

<pre><code>    &lt;svg&gt;
      &lt;circle cx=""&gt;&lt;/circle&gt;
    &lt;/svg&gt;
</code></pre>

<p>我们希望Angular能够正常绑定，但是当我们检查浏览器控制台时候我们会发现错误<code>Rrrpr:Invalid value for attribute cx=</code>。因为<code>SVG DOM API</code>的严格性，你不能简单的写成 <code>cx=</code>。采用<code>ng-attr-cx</code>你可以解决这个问题。也就是说如果一个属性的绑定前缀是<code>ngAttr</code>,那么在绑定时将被应用到相应的无前缀的属性：</p>

<pre><code> &lt;svg&gt;
  &lt;circle ng-attr-cx=""&gt;&lt;/circle&gt;
&lt;/svg&gt; 
</code></pre>

<h5>1.2.5 create directives</h5>

<p>首先，让我们了解一下<code>API for registering directives</code>,像<code>controller</code>一样,<code>directives</code>也是用modules注册。注册directive详情见<code>module.directive API</code>。<br/>
关于directive命名：</p>

<pre><code>Best Practice: In order to avoid collisions with some future standard, it's best    
to prefix your own directive names. For instance, if you created a &lt;carousel&gt;    
directive, it would be problematic if HTML7 introduced the same element. A two or     
three letter prefix (e.g. btfCarousel) works well. Similarly, do not prefix your    
owndirectives with ng or they might conflict with directives included in a future      
version of Angular. 
</code></pre>

<p>如下directive:</p>

<p>```
angular.module(&lsquo;docsRestrictDirective&rsquo;, [])
  .controller(&lsquo;Controller&rsquo;, [&lsquo;$scope&rsquo;, function($scope) {</p>

<pre><code>$scope.customer = {
  name: 'Naomi',
  address: '1600 Amphitheatre'
};
</code></pre>

<p>  }])
  .directive(&lsquo;myCustomer&rsquo;, function() {</p>

<pre><code>return {
  restrict: 'E',
  templateUrl: 'my-customer.html'
};
</code></pre>

<p>  });
```</p>

<p><code>restrict</code>的可选参数有：</p>

<p><code>
'A' - only matches attribute name
'E' - only matches element name
'C' - only matches class name
</code><br/>
这些限制条件可以被组合使用：如 ‘AEC-matches either attribute or element or class name’。默认为'A'。</p>

<h5>1.2.6 creating a directive that Manipulates the DOM</h5>

<p>下面一个例子是展示当前时间，并且每过一秒钟，DOM时间也跟着更新 <a href="http://plnkr.co/edit/ngdoc:example-example86@snapshot?p=preview" target="_blank"><strong>Demo</strong></a>。 <br/>
directive若要修改DOM则需要使用<code>link</code>选项。<code>link</code>能接收一个有一下参数的function，<code>function link(scope,element,attrs){...}</code>:</p>

<ul>
<li><code>scope</code>:一个Angular作用域对象</li>
<li><code>element</code>:directive 匹配的<code>jqLite-wrapped</code>元素</li>
<li><code>attrs</code>:是一个散列对象的键值对,有着规范化属性名称及其对应的属性值</li>
</ul>


<h3>1.2.7 Filters</h3>

<p><code>filter</code>是用来格式化一个表达式的值的。他们能在<code>view template</code>、<code>controller</code>和<code>service</code>中使用，你能很方便的定义自己的<code>filter</code>。</p>

<h4>（1） 在view templates中使用filter</h4>

<p>Filters能在<code>view tmeplate</code>中的表达式中使用，语法如下：</p>

<pre><code> 
</code></pre>

<p>比如：标记12 表示使用<code>currency</code>filter 格式化数字12为货币形式。结果为：$12.00。<br/>
Filters 能使用一系列的filter,这称为“chaining(链)”，语法如下：</p>

<pre><code> 
</code></pre>

<p>Filters也可以携带参数，语法如下：</p>

<pre><code>
</code></pre>

<p>例如：标记<code>1234</code>表示数字1234使用<code>number</code>过滤器过滤保留2位小数点，结果为：1，234.00。</p>

<h4>（2）在controller,services,和directives中使用filters</h4>

<p>在controller,services,和directives中使用filters你需要给他们注入依赖<code>&lt;filterName&gt;Filter</code>。例如,使用依赖<code>numberFilter</code>会注入<code>number</code>过滤器。见<a href="http://plnkr.co/edit/ngdoc:example-example96@snapshot?p=preview" target="_blank"><strong>demo</strong></a>。</p>

<h4>（3）创建自定义filters</h4>

<p>编写自己的filter很简单，仅仅需要在<code>module</code>中注册一个新的<code>filter factory</code>函数。在内部，使用了<code>filterProvider</code>。<code>factory</code>函数需要一个新的<code>filter</code>函数，该函数的第一个参数为需要过滤的表达式的值。见<a href="http://plnkr.co/edit/ngdoc:example-example97@snapshot?p=preview" target="_blank"><strong>demo</strong></a>。</p>

<h3>表单（Forms）</h3>

<p>通常，<code>input</code>、<code>select</code>、<code>textarea</code>等控件是用来给用户输入数据的。而<code>Forms</code>是对这些控件的一种集合。<code>Angular</code>的<code>Form</code>和<code>controls(控件)</code>提供了数据验证服务，所以用户可以避免无效输入。这些功能能给用户更好的体验。</p>

<h5>（1）simple form(简单的表单)</h5>

<p>理解双向绑定（data-binding）的关键指令（directive）是<code>ngModel</code>。<code>ngModel</code>指令提供的双向绑定功能能使<code>model</code>和<code>view</code>数据自动同步。另外，它提供了一个API给其他的<code>directive</code>来增强它的功能。见<a href="http://plnkr.co/edit/ngdoc:example-example98@snapshot?p=preview" target="_blank"><strong>demo</strong></a>。</p>

<pre><code>    &lt;div ng-controller="Controller"&gt;
      &lt;form novalidate class="simple-form"&gt;
        Name: &lt;input type="text" ng-model="user.name" /&gt;&lt;br /&gt;
        E-mail: &lt;input type="email" ng-model="user.email" /&gt;&lt;br /&gt;
        Gender: &lt;input type="radio" ng-model="user.gender" value="male" /&gt;male
        &lt;input type="radio" ng-model="user.gender" value="female" /&gt;female&lt;br /&gt;
        &lt;button ng-click="reset()"&gt;RESET&lt;/button&gt;
        &lt;button ng-click="update(user)"&gt;SAVE&lt;/button&gt;
      &lt;/form&gt;
      &lt;pre&gt;form = &lt;/pre&gt;
      &lt;pre&gt;master = &lt;/pre&gt;
    &lt;/div&gt;

    &lt;script&gt;
      function Controller($scope) {
        $scope.master = {};

        $scope.update = function(user) {
          $scope.master = angular.copy(user);
        };

        $scope.reset = function() {
          $scope.user = angular.copy($scope.master);
        };

        $scope.reset();
      }
    &lt;/script&gt;  
</code></pre>

<p>注意<code>novalidate</code>是用来禁用浏览器的表单验证。</p>

<h5>（2）使用CSS classes</h5>

<p>为了想控件一样定义样式，<code>ngModel</code>增加了一下CSS classes:</p>

<ul>
<li>ng-valid</li>
<li>ng-invalid</li>
<li>ng-pristine</li>
<li>ng-dirty</li>
</ul>


<p>其效果见<a href="http://plnkr.co/edit/ngdoc:example-example99@snapshot?p=preview" target="_blank"><strong>demo</strong></a>。</p>

<h4>(3) 绑定表单及控制状态</h4>

<p>一个<code>form</code>是一个<code>FormController</code>的实例，<code>form</code>实例的<code>name</code>属性可以请求到<code>scope</code>中。类似的，一个<code>input</code>含有<code>ngModel</code>的控件会拥有一个<code>NgModelController</code>的实例。这允许我们扩展一些特性如:</p>

<ul>
<li>RESET button is enabled only if form has some changes</li>
<li>SAVE button is enabled only if form has some changes and is &ndash; valid</li>
<li>custom error messages for user.email and user.agree-</li>
</ul>


<h4>(4) custom tirggers</h4>

<p>默认地，任何的内容改变都会触发<code>model</code>的更新和<code>form</code>的验证。您可以使用<code>ngModelOptions</code>指令覆盖此行为将只绑定到指定的事件列表。如：<code>ng-model-option="{updateOn:"blur"}"</code>当控件失去焦点时候会进行更新和验证。你还可以设置几个事件使用空格分隔如：</p>

<pre><code>`ng-model-options="{updateOn:"mousedown blur"}"`。
</code></pre>

<p>如果你想保留默认的行为和增加新的事件来触发<code>model</code>的更新和验证：</p>

<pre><code>ng-model-options="{ updateOn: 'default blur' }"
</code></pre>

<h4>(5) 推迟model更新时间</h4>

<p>你可以使用<code>ngModelOption</code>指令的key <code>debounce</code>来延迟<code>model</code>的更新和验证时间。这种延迟也会适用于解析器，<code>validators</code> 和 <code>model</code>的标记为<code>$dirty</code>和<code>$pristine</code>。如<code>ng-model-options="{debounce: 500}"</code>表示当内容发生变化后在经过0.5秒才会触发<code>model</code>的更新和<code>form</code>的验证。在特殊环境这能很有效的阻止立刻更新（如：blur事件）</p>

<pre><code>ng-model-options="{updateOn:'default blur',debounce:{default:500,blur:0}}" 
</code></pre>

<p>如果是用在一个元素上面，则该原色的全部子元素和控件都会从它那继承，除非子元素是隐藏的。见<a href="http://plnkr.co/edit/ngdoc:example-example102@snapshot?p=preview" target="_blank"><strong>demo</strong></a></p>

<h4>(6) 自定义验证</h4>

<p>Angular 提供了html5常用的输入类型：（<code>text</code>,<code>number</code>,<code>url</code>,<code>email</code>,<code>radio</code>,<code>checkbox</code>）,同时也提供了一些验证指令（<code>required</code>,<code>pattern</code>,<code>minlength</code>,<code>maxlength</code>,<code>min</code>,<code>max</code>）。定义你自己的验证可以给<code>ngModel Controller</code>定义你自己的<code>directive</code>的时候增加一个自定义的<code>validation function</code>.两种情况下可能需要自定义验证：</p>

<ul>
<li><strong>Model to View update</strong>: 只要绑定的模型发生改变，所有在<code>NgModelController#$formatters</code>的函数数组都是<code>pipe-lined</code>,通过<code>NgModelController#$setValidity</code>这些函数都有机会还改变或者验证控件和表单。</li>
<li><strong>View to Model update</strong>:同样的方式，当用户和一个控件交互时，它会调用<code>NgModelController#$setViewValue</code>。 <br/>
英文太烂硬是没看懂，蛋疼! 见<a href="http://plnkr.co/edit/ngdoc:example-example103@snapshot?p=preview" target="_blank"><strong>demo</strong></a></li>
</ul>

]]></content>
  </entry>
  
</feed>
